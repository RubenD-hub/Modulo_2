print('Hola R')
sqrt(12)
sqrt(x =121)
sqrt(121)
x
x=121
x
sqrt(x)
ls
cls
+ 10000000
+ 0.0000001
+ 10000000
+ 0.0000001
+  10000^100
+ -10000^100
+ 1/0
+ -1/0
(var.hola <- "Hola Mundo")
(var.number <- 5L)
source('C:/Users/ruben/Escritorio/Bedu/Modulo_2/Sesion_1/Ejemplo_01.R', encoding = 'UTF-8')
?max
max(100/4, 108/5, 200/20, sqrt(81), 3*5)
??max
(var.number <- 5L)
(var.double <- 2.7076)
(var.logical <- T)
(vector <- c(1,2))
(var.hola <- "Hola Mundo")
class(var.number)
class(var.hola)
class(var.double)
class(var.logical)
vector
class(var.logical)
typeof(var.logical)
a <- c(4, 6, 8, 10,12)
b <- c(3, 5, 7, 9)
length(a)
length(b)
a[1]
b[4]
c(a,b)
sort(c(a,b), decreasing = F)
sort(c(a,b), decreasing = T)
3:12  # así de sencillo es
10:1
1:1000
0:10
(vector.by2 <- seq(from = 1, to = 10, by =2))
(vector.by3 <- seq(1, 10, 3))
rep(5, times = 6)
rep(a, 2)
rep(b, 3)
c(1, 2) + c(7, 8, 9, 10)
a + b
a - b
a*b
a/b
a^2
a1 <- a*0.5 + b^2
a1[1]
(m <- matrix(1:9, nrow = 3, ncol = 3))
(m <- matrix(1:9, nrow = 3, ncol = 4))
(m <- matrix(1:9, nrow = 4, ncol = 3))
3
(m <- matrix(1:9, nrow = 3, ncol = 3))
m[1,1]
m[ ,1]
(sum.vecmat <- c(1, 2) + m)
(n <- matrix(2:7, 4, 6))
dim(n)
n[n > 4]
dim(n)[1] # num filas
n[n > 4]
dim(n)[2] # num col
n[n > 4]
which(n > 4)
a <- 2:6
b <- 5:9
m1 <- cbind(a,b)  # Une por col
m1
m2 <- rbind(a,b)  # Une por filas
m2
(milista <- list(nombre = "Pepe", no.hijos = 3, edades.hijos = c(4, 7, 9)))
(milista <- list(nombre = "Pepe", no.hijos = 3, edades.hijos = c(4, 7, 9)))
str(milista)
milista$nombre
(x <- 10:21)
(y <- letters[x])
(mydf <- data.frame(edad=x, grupo=y))
str(mydf)
mydf[1]
mydf[,1]
mydf$edad
mean(mydf$edad)
paste("La media de la edad es:", mean(mydf$edad))
summary(mydf)
getwd()
setwd("C:/Users/ruben/Escritorio/Bedu/Modulo_2/Sesion_1/") # Depende del usuario donde ubicar su wd
getwd()
amazon.books <- read.csv("bestsellers with categories.csv")
setwd("C:/Users/ruben/Escritorio/Bedu/Modulo_2/Sesion_1/Data/") # Depende del usuario donde ubicar su wd
read.csv("bestsellers with categories.csv") # El archivo csv debe estar en el directorio de trabajo
amazon.books <- read.csv("bestsellers with categories.csv")
str(amazon.books)
head(amazon.books); tail(amazon.books)
dim(amazon.books)
class(amazon.books)
data.url <- read.csv("https://www.football-data.co.uk/mmz4281/2021/SP1.csv")
amazon.books
str(data.url)
head(data.url); tail(data.url)
data.url <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-01/Data/netflix_titles.csv")
dim(data.url)
str(data.url)
class(data.url)
View(data.url)
net.2015 <- data.url[data.url$release_year > 2015]
data.url$release_year
data.url$release_year > 2015
data.url[data.url$release_year > 2015]
net.2015 <- data.url[data.url$release_year > 2015,]
View(net.2015)
# 4. Escribir los resultados en un archivo .csv llamado res.netflix.csv (Hint: consulta la función
#    write.csv)
res.netflix.csv <- write(net.2015)
?write
# 4. Escribir los resultados en un archivo .csv llamado res.netflix.csv (Hint: consulta la función
#    write.csv)
write(net.2015, file = "res.netflix.csv")
# 4. Escribir los resultados en un archivo .csv llamado res.netflix.csv (Hint: consulta la función
#    write.csv)
write.csv(net.2015, file = "res.netflix.csv")
version
w <- c(2,4,6,8,10)
print("Este loop calcula el cuadrado de los elementos del vector w")
for(i in 1:length(w) ) {
w.sq <- w[i]**2
print(w.sq)
}
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
(x <- runif(1, 0, 10)) ## creamos un número aleatorio entre 0 y 10
if(x > 5) {
y <- TRUE
print(paste(y, ", x=", round(x,2) ,"> 5"))
} else {
y <- FALSE
print(paste(y, ", x=", round(x,2) ," < 5"))
}
(x <- runif(1, 0, 10)) ## creamos un número aleatorio entre 0 y 10
if(x > 5) {
y <- TRUE
print(paste(y, ", x=", round(x,2) ,"> 5"))
} else {
y <- FALSE
print(paste(y, ", x=", round(x,2) ," < 5"))
}
if(x > 5) {
y <- TRUE
print(paste(y, ", x=", round(x,2) ,"> 5"))
} if else {
y <- FALSE
print(paste(y, ", x=", round(x,2) ," < 5"))
}
if(x > 5) {
y <- TRUE
print(paste(y, ", x=", round(x,2) ,"> 5"))
} else if {
y <- FALSE
print(paste(y, ", x=", round(x,2) ," < 5"))
}
if(x > 5) {
y <- TRUE
print(paste(y, ", x=", round(x,2) ,"> 5"))
} else {
y <- FALSE
print(paste(y, ", x=", round(x,2) ," < 5"))
}
amazon.best <- read.csv("https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/bestsellers%20with%20categories.csv")
?t
t(amazon.best)
class(t(amazon.best))
tAmazon <- as.data.frame(t(amazon.best))
colnames(tAmazon) <- tAmazon[1,]
View(tAmazon)
row.names(tAmazon)
View(tAmazon)
which.max(tAmazon["Price",])  # Libro con mayor precio
View(tAmazon)
View(amazon.best)
which.max(tAmazon["Price",1])  # Libro con mayor precio
which.max(tAmazon["Price",])  # Libro con mayor precio
which.min(tAmazon["Price",])  # Libro con menor precio
ran <- rnorm(44)
res <- vector()
res[i] <- ran[i]**3 +12
for (i in 1:15) {
res[i] <- ran[i]**3 +12
print(res)
}
print(res[i])
for (i in 1:15) {
res[i] <- ran[i]**3 +12
print(res[i])
}
df.al <- data.frame(ran = ran[1:15], result = res)
View(df.al)
df.al
x = c(4000, 9000, 9000, 10000); mean(x)
median(x)
library(DescTools)
# Si lo que deseamos es obtener la moda de un conjunto de mediciones, una
# alternativa es instalar el paquete DescTools en R mediante la instrucción
install.packages("DescTools") #, luego utilizamos la función Mode del paquete
library(DescTools)
library(DescTools)
Mode(x) # mode es diferente de Mode (Case sensitive)
library(DescTools)
x <- c(29, 13, 62, 4, 63, 96, 1, 90, 50, 46)
quantile(x, 0.25) # cuantil del 25%
quantile(x, c(0.25,0.50,0.75)) # Cuartiles
quantile(x, seq(0.1,0.9, by = 0.1)) # Deciles
IQR(x)
quantile(x, probs = 0.75) - quantile(x, probs = 0.25)
plot(x)
var(x)
sd(x)
set.seed(134)
x <- round(rnorm(1000, 175, 6), 1)
mean(x)
median(x)
quantile(x, seq(0.1,0.9, by = 0.1)) # Deciles
IQR(x)
var(x)
sd(x)
Mode(x)
library(DescTools)
plot(x)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(x)
View(iris)
set.seed(57)
x <- rnorm(35)
e <- rnorm(35)
y <- 5 + 2*x + e
modelo <- lm(y~x)
summary(modelo)
moda <- function(vector){
f.abs <- table(vector) # frecuencias absolutas
max.f.abs <- max(f.abs) # obtenemos la máxima frecuencia absoluta
pos.max <- which(f.abs == max.f.abs) # posición(es) de la(s) máxima(s) frecuencia(s) absoluta(s)
print("La(s) moda(s) es(son): ")
print(names(f.abs[pos.max]))
paste("Con una frecuencia de: ", unique(f.abs[pos.max]))
}
# Pon a prueba la función
x <- sample(1:100, 100, replace = T) # Tomamos una muestra aleatoria de tamaño 100 con reemplazo de los primeros 100 números naturales
table(x) # obtenemos las frecuencias absolutas de los valores de la muestra
moda(x) # obtenemos la moda de los valores de la muestra
head(airquality)
View(airquality)
library(dplyr)
detach("package:DescTools", unload = TRUE)
library(dplyr)
library(dplyr)
dim(airquality)
str(airquality)
bien <- complete.cases(airquality)
sum(bien)
airquality[bien,]
View(airquality)
data <- select(airquality, Ozone:Temp)
mediana <- function(vector){
x <- sort(vector)
if (length(x) %% 2 != 0){
return(x[length(x) / 2 + 1])
} else {
return((x[length(x) / 2 + 1] + x[length(x) / 2]) / 2)
}
}
mediana <- function(vector){
x <- sort(vector)
if (length(x) %% 2 != 0){
return(x[length(x) / 2 + 1])
} else {
return((x[length(x) / 2 + 1] + x[length(x) / 2]) / 2)
}
}
set.seed(134)
set.seed(134)
x <- round(rnorm(99, 50, 12), 0)
x
mediana(x)
median(x)
x <- sort(vector)
length(x) %% 2
length(x) / 2 + 1
length(x) / 2 + .5
x[50]
red <- sort(x)
red[50]
x <- round(rnorm(98, 50, 12), 0)
# Funcion Mediana
mediana <- function(vector){
x <- sort(vector) # Ordenamos
if ((length(x) %% 2) != 0){
return(x[length(x) / 2 + .5])
} else {
return((x[(length(x) / 2) + 1] + x[length(x) / 2]) / 2)
}
}
# Obtenemos numeros aleatorios
set.seed(134)
x <- round(rnorm(98, 50, 12), 0)
x
# Funcion Mediana
mediana <- function(vector){
x <- sort(vector) # Ordenamos
if ((length(x) %% 2) != 0){
return(x[length(x) / 2 + .5])
} else {
return((x[(length(x) / 2) + 1] + x[length(x) / 2]) / 2)
}
}
x <- round(rnorm(98, 50, 12), 0)
x
mediana(x)
median(x)
cbind(1:10, 11:20, 21:30)
cbind(1:10, matrix(11:30, ncol =2))
cbind(data.frame(x = 1:10, y = 11:20), z = 21:30)
rbind(1:10, 11:20, 21:30)
rbind(1:10, matrix(11:30, ncol =2))
rbind(1:10, matrix(11:30, ncol =10))
rbind(data.frame(x = 1:10, y = 11:20), z = 21:30)
rbind(data.frame(x = 1:10, y = 11:20))
rbind(data.frame(x = 1:10, y = 11:20), z = 21:30)
rbind(data.frame(x = 1:10, y = 11:20), c(1,2))
df1 <- data.frame(x = 1:5, y = 6:10, z = 16:20)
df1
df2 <- data.frame(x = 51:55, y = 101:105, z = 151:155)
df2
df1; df2
rbind(df1, df2)
cbind(df1, df2)
X <- matrix(1:49, ncol = 7)
X
apply(X, 1, mean) # cálculo de la media para las filas
apply(X, 2, median) # cálculo de la mediana para las columnas
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1112 <- "https://www.football-data.co.uk/mmz4281/1112/SP1.csv"
u1213 <- "https://www.football-data.co.uk/mmz4281/1213/SP1.csv"
u1314 <- "https://www.football-data.co.uk/mmz4281/1314/SP1.csv"
setwd("c:/Users/ruben/Escritorio/Bedu/Modulo_2/Sesion_2/Data/")
download.file(url = u1011, destfile = "SP1-1011.csv", mode = "wb")
download.file(url = u1112, destfile = "SP1-1112.csv", mode = "wb")
download.file(url = u1213, destfile = "SP1-1213.csv", mode = "wb")
download.file(url = u1314, destfile = "SP1-1314.csv", mode = "wb")
dir()
lista <- lapply(dir(), read.csv) # Guardamos los archivos en lista
View(lista)
lista <- lapply(lista, select, Date:FTR) # seleccionamos solo algunas columnas de cada data frame
library(dbplyr)
setwd("c:/Users/ruben/Escritorio/Bedu/Modulo_2/Sesion_2/Data_E/")
u1011 <- "https://www.football-data.co.uk/mmz4281/1718/D1.csv"
u1112 <- "https://www.football-data.co.uk/mmz4281/1819/D1.csv"
u1213 <- "https://www.football-data.co.uk/mmz4281/1920/D1.csv"
u1314 <- "https://www.football-data.co.uk/mmz4281/2021/D1.csv"
download.file(url = u1011, destfile = "2017-2018F.csv", mode = "wb")
download.file(url = u1112, destfile = "2018-2019F.csv", mode = "wb")
download.file(url = u1213, destfile = "2019-2020F.csv", mode = "wb")
download.file(url = u1314, destfile = "2020-2021F.csv", mode = "wb")
lista <- lapply(dir(), read.csv) # Guardamos los archivos en lista
lista <- lapply(lista, select, Date:FTR) # seleccionamos solo algunas columnas de cada data frame
library(dplyr)
library(dplyr)
